# People

沟通是所有工作内容里最困难的部分，学习一些技巧，花足够多的时间，做好自己和内外部的沟通，并且让团队内部小伙伴之间的沟通顺畅。 
多听，少说，学会换位思考。 
在绝大多数创业公司的绝大多数阶段，减缓试错过程中资源消耗的速度是管理者最主要的任务：而要做到这点首先就是严格控制员工的质量和数量。 
招预算允许的最好的人，给他们争取两倍工资，给他们争取尽量多的期权，提升他们的期望值和参与感：他们会做出三倍的输出，因为聪明人都是渴望成功的。 
招自己的朋友，或者朋友推荐的人，会比较靠谱，合作起来也顺畅。但是永远不要招你没有办法开掉的朋友。 
不管融到多少钱，当产品确实征服了一些用户得到验证之后，再开始缓慢地扩大研发团队。 
不同水平的人，需要的管理也不一样。有的人需要明确的步骤才能做好，多给他指点方向；有的人只需要你讲清楚需要什么和为什么需要，他会想出比你更好的办法。 
有人的地方就有江湖，要避免办公室政治，最好的办法是保持团队小而美。但人多起来了之后政治是避免不了的，这个时候要建设矩阵式结构，明确每个人的作用和功能，来减少各种问题。 
团队里面那些对产品没热情对技术没追求的人，和烂代码让code smelly一样会让团队smelly，这种人的害处就好像禁止吸烟的餐厅里面坐了个抽烟的人，会让所有的人都被呛到，要尽早处理。 
通常你在想“我是不是应该开掉这个人”的时候，就到了该开掉的时候了。这是工作的一部分，职业地处理好，不要让事情搞得很戏剧化。 
有些人会有过激的言语或者行为，有时候这是因为创业的压力，有时候可能跟工作都没有关系。不要因为这些影响自己的情绪，要不断和团队沟通大的方向是什么。 
定期的1:1就好像定期查看油箱：如果你偷懒，就要做好有天车开到半山腰的时候没有油了的准备。 
创业公司里做1:1不要谈虚的，多跟核心人员同步他们真正关心的话题：公司现金流和投融资的情况，项目的实际风险，他们具体表现如何等等。坦率一些，讲真话，这样你跟大家同步一些决策的时候就不需要那么多上下文了。 
设定目标要设定困难但是能达到的，对目标的定义要清晰，并且随着实际情况的变化，可以及时调整。 
既要做团队最好的保姆，也需要不断地挑战自己和他们能力的极限。 
对任何一个员工的动作，都会影响到所有的人。如果你对某个人进行了奖励或者把他升成了leader，要让团队里面所有的人明白这是为什么，特别是其他人应该怎样做才能也拿到一样的奖励或者升职。 
如何花钱是公司文化最明显的符号，并且也是最难改变的。它向员工直接说明了对公司来说什么是最重要的。公司聪明地花钱，会让聪明人看到并留下，洗脑只会吓跑他们。 
创业常常不得不经历失败，特别是那种投入了很多精力和心血后还是失败。不是每个人对反复失败都有很好的准备和容忍度，员工尤其如此。一方面，尽量控制往一个有风险的项目上投入的成本，来降低失败后的伤痛和损耗；另一方面，避免把某个功能或者产品描述成会让公司所向披靡的银弹。有的管理者很喜欢这样来鼓舞士气，这样的风险很大，要让“尝试开创一番新事业肯定会遭遇很多失败”变成公司所有部门的共识。 
失败更多时候是对产品或者团队的弱点没有清醒的认识，而不是因为有那些弱点。 
营造一种随时都认为现在的成绩主要是因为运气好而不是大家有多牛逼或者多努力的文化，这样可以给团队一个心理暗示：现在是不错，但是接下来不能再靠运气或者是努力了，要变得更专业，更深入，更细致。 
不要沉溺于讲述如何创业的电影或者书籍，要相信商业社会有它的客观规律，没有人可以靠突然悟到小诀窍成功。 
忽略媒体的报道，特别是那些称赞的报道。不要让员工转发公司的微信，如果他们充满发自内心的骄傲，他们自己会分享。


优先级

理解并接受你会犯错误。
你不是你的代码
不管你知道多少“空手道”，别人总会知道更多。
不要重写代码没有咨询。
在尊重，尊重和耐心的情况下对待比你少的人。
世界上唯一的常数是变化。开放，接受微笑。
唯一真正的权威源于知识，而不是来自立场。
为了你所相信的战斗，但优雅地接受失败。
不要是“拐角处的编码器”。
批评代码而不是人，对编码器而言，不是代码。
